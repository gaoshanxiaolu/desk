---- tx_thread_sleep Matches (65 in 16 files) ----
Ble_uart.c (target\demo\sdk_shell):150
    tx_thread_sleep(1000);

   printf("enter uart desk data thread \r\n");
Ble_uart.c (target\demo\sdk_shell):683
		tx_thread_sleep(100);
	}
	
Ble_uart.c (target\demo\sdk_shell):745
		tx_thread_sleep(2000);
		
		qcom_gpio_pin_set(pin_light,TRUE);
Ble_uart.c (target\demo\sdk_shell):753
		tx_thread_sleep(2000);

		#else
Ble_uart.c (target\demo\sdk_shell):763
		tx_thread_sleep(2000);

		#endif
Ble_uart.c (target\demo\sdk_shell):814
		tx_thread_sleep(delay_polling_ms);
		
		ir1 = qcom_gpio_pin_get(pin_ir1);
Ble_uart.c (target\demo\sdk_shell):1044
			tx_thread_sleep(100);
			free_desk_pin();
    		tx_thread_sleep(M_INTERVAL_N_SIG_TIMER);
			//gen_m_signal();
    		gen_1234_signal(1);
			tx_thread_sleep(100);
			free_desk_pin();

Ble_uart.c (target\demo\sdk_shell):1057
			tx_thread_sleep(100);
			free_desk_pin();

    		tx_thread_sleep(M_INTERVAL_N_SIG_TIMER);
    		gen_1234_signal(2);
			tx_thread_sleep(100);
			free_desk_pin();

Ble_uart.c (target\demo\sdk_shell):1070
			tx_thread_sleep(100);
			free_desk_pin();

    		tx_thread_sleep(M_INTERVAL_N_SIG_TIMER);
    		gen_1234_signal(3);
			tx_thread_sleep(100);
			free_desk_pin();

Ble_uart.c (target\demo\sdk_shell):1083
			tx_thread_sleep(100);
			free_desk_pin();

    		tx_thread_sleep(M_INTERVAL_N_SIG_TIMER);
    		gen_1234_signal(4);

			tx_thread_sleep(100);
			free_desk_pin();
            mx_sig = INVALID_XM;
Ble_uart.c (target\demo\sdk_shell):1096
			tx_thread_sleep(100);
			free_desk_pin();

Ble_uart.c (target\demo\sdk_shell):1104
			tx_thread_sleep(100);
			free_desk_pin();

Ble_uart.c (target\demo\sdk_shell):1112
			tx_thread_sleep(100);
			free_desk_pin();

Ble_uart.c (target\demo\sdk_shell):1120
			tx_thread_sleep(100);
			free_desk_pin();

Ble_uart.c (target\demo\sdk_shell):1127
    		tx_thread_sleep(100);
    	}
    }
BTPSKRNL.c (target\...\btpskrnl):138
   tx_thread_sleep(Ticks);
}

Csr1k_host_boot.c (f:\):344
	tx_thread_sleep(20);//拉低一段时间（至少18ms）， 通知传感器准备数据
	qcom_gpio_pin_set(SDA, 1);//SEND_SDA=1;	 //释放总线
	qcom_gpio_pin_dir(SDA, 1);;	//设为输入模式，判断传感器响应信号
Dual_uart_demo.c (target\...\dual_uart_demo):403
    tx_thread_sleep(1000);
    A_PRINTF("uart0_fd %d uart1_fd %d uart2_fd %d\n", uart0_fd, uart1_fd, uart2_fd);
    A_PRINTF("Firmware version    : %s\n", ver);
    tx_thread_sleep(10000);

    uart_length = strlen((A_CHAR *)uart_test_str0);
Dual_uart_demo.c (target\...\dual_uart_demo):435
                //tx_thread_sleep(100);
                if (uart_length)
                {                    
Dual_uart_demo.c (target\...\dual_uart_demo):495
                            //tx_thread_sleep(100);
                        }                        
                    }
Dual_uart_demo.c (target\...\dual_uart_demo):584
                // tx_thread_sleep(100);
                if (uart_length)
                {                    
Dual_uart_demo.c (target\...\dual_uart_demo):606
                            //tx_thread_sleep(100);
                        }                        
                    }
Dual_uart_demo.c (target\...\dual_uart_demo):650
                // tx_thread_sleep(100);
                if (uart_length)
                {
Dual_uart_demo.c (target\...\dual_uart_demo):672
                            //tx_thread_sleep(100);
                        }                        
                    }
Dual_uart_demo.c (target\...\dual_uart_demo):760
        tx_thread_sleep(1000);
    }
    qcom_set_uart_config((A_CHAR *)"UART0",&com_uart_cfg);
Dual_uart_demo.c (target\...\dual_uart_demo):764
    tx_thread_sleep(1000);
    A_PRINTF("uart0_fd %d uart1_fd %d, uart2_fd %d\n", uart0_fd, uart1_fd, uart2_fd);
    tx_thread_sleep(10000);

    uart_length = strlen((A_CHAR *)uart_test_str0);
Dual_uart_demo.c (target\...\dual_uart_demo):790
                tx_thread_sleep(100);
                if (uart_length) {
                    A_PRINTF("uart0 receive length:%d\n", uart_length);
Dual_uart_demo.c (target\...\dual_uart_demo):794
                    tx_thread_sleep(100);
                }
            } else if (FD_ISSET(uart1_fd, &fd)) {
Dual_uart_demo.c (target\...\dual_uart_demo):798
                tx_thread_sleep(100);
                if (uart_length) {
                    A_PRINTF("uart1 receive length:%d\n", uart_length);
Dual_uart_demo.c (target\...\dual_uart_demo):805
                    tx_thread_sleep(100);
                }
            }  else if (FD_ISSET(uart2_fd, &fd)) {
Dual_uart_demo.c (target\...\dual_uart_demo):809
                tx_thread_sleep(100);
                if (uart_length) {
                    A_PRINTF("uart2 receive length:%d\n", uart_length);
Dual_uart_demo.c (target\...\dual_uart_demo):816
                    tx_thread_sleep(100);
                }
            } else {
I2c_test.c (target\demo\sdk_shell):287
	tx_thread_sleep(20);//拉低一段时间（至少18ms）， 通知传感器准备数据
	qcom_gpio_pin_set(SDA, 1);//SEND_SDA=1;	 //释放总线
	qcom_gpio_pin_dir(SDA, 1);;	//设为输入模式，判断传感器响应信号
I2c_test.c (target\demo\sdk_shell):667
			tx_thread_sleep(3000);
			continue;
		}
I2c_test.c (target\demo\sdk_shell):715
		tx_thread_sleep(3000);
	}
}
Shell_cmds.c (target\demo\sdk_shell):307
    tx_thread_sleep(sleep_seconds * TXQC_TICK_PER_SEC);
   
    qcom_timer_start(&shell_timer);
Swat_parse.c (target\demo\sdk_shell):161
        tx_thread_sleep(1000);
        for (i = 0; i < count; i++)
        {
Swat_parse.c (target\demo\sdk_shell):173
            //tx_thread_sleep(10);
            printf("bssid = %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n",info[i].bssid[0],info[i].bssid[1],info[i].bssid[2],info[i].bssid[3],info[i].bssid[4],info[i].bssid[5]);

        //   tx_thread_sleep(10);
            printf("channel = %d\n",info[i].channel);

Swat_parse.c (target\demo\sdk_shell):452
	        	tx_thread_sleep(120);
			}
		}
Swat_parse.c (target\demo\sdk_shell):470
	        	tx_thread_sleep(120);
			}
		}
Swat_parse.c (target\demo\sdk_shell):554
	        	tx_thread_sleep(120);
			}
		}
Swat_parse.c (target\demo\sdk_shell):2887
           tx_thread_sleep(1000);
           printf("count : %d\n", count);
           for (i = 0; i < count; i++)
Swat_wmiconfig_misc.c (target\...\sdk_shell):323
        tx_thread_sleep(100);
   }
}
Swat_wmiconfig_misc.c (target\...\sdk_shell):425
	tx_thread_sleep(100);
}

Swat_wmiconfig_network.c (target\...\sdk_shell):2290
			tx_thread_sleep(500);
			goto finished;
		}
Swat_wmiconfig_network.c (target\...\sdk_shell):2346
			tx_thread_sleep(200);
		}
		
Swat_wmiconfig_network.c (target\...\sdk_shell):2354
			tx_thread_sleep(500);
		}
		
Test_thread.c (target\...\testmod):24
        tx_thread_sleep(60000);
        A_PRINTF("mod task running\n");
    }
Test_thread.c (target\...\testmod):61
    tx_thread_sleep(1000);

    tx_thread_terminate(&testmod_thread);
Tx_api.h (target\include\threadx):1018
#define tx_thread_sleep                             _tx_thread_sleep
#define tx_thread_stack_error_notify                _tx_thread_stack_error_notify
#define tx_thread_suspend                           _tx_thread_suspend
Tx_api.h (target\include\threadx):1142
#define tx_thread_sleep                             _tx_thread_sleep
#define tx_thread_stack_error_notify                _tx_thread_stack_error_notify
#define tx_thread_suspend                           _txr_thread_suspend
Tx_api.h (target\include\threadx):1254
#define tx_thread_sleep                             _tx_thread_sleep
#define tx_thread_stack_error_notify                _tx_thread_stack_error_notify
#define tx_thread_suspend                           _txe_thread_suspend
Tx_api.h (target\include\threadx):1482
UINT        tx_thread_sleep(ULONG timer_ticks);
UINT        tx_thread_stack_error_notify(VOID (*stack_error_handler)(TX_THREAD *));
UINT        tx_thread_suspend(TX_THREAD *thread_ptr);
Tx_user.h (target\include\threadx):133
/* Determine if timer expirations (application timers, timeouts, and tx_thread_sleep calls 
   should be processed within the a system timer thread or directly in the timer ISR. 
   By default, the timer thread is used. When the following is defined, the timer expiration 
Uart_at_main.c (target\...\uart_at):1024
        tx_thread_sleep(1000);
        for (i = 0; i < count; i++)
        {
Upgrade_task.c (target\demo\sdk_shell):197
			tx_thread_sleep(1000);
			cnt_timeout++;
			if(cnt_timeout > 1800)
Upgrade_task.c (target\demo\sdk_shell):272
			tx_thread_sleep(100);

		}
Upgrade_task.c (target\demo\sdk_shell):284
			tx_thread_sleep(1000);
		}
    	
Upgrade_task.c (target\demo\sdk_shell):305
		tx_thread_sleep(10000);
		
		if(!query_version_flag())
Upgrade_task.c (target\demo\sdk_shell):376
			//tx_thread_sleep(1000);
		}
		
Watch_dog_task.c (target\demo\sdk_shell):16
    	tx_thread_sleep(2000);

		qcom_watchdog_feed();
Wx_heart_package.c (target\...\sdk_shell):565
		tx_thread_sleep(1500);

		
Wx_heart_package.c (target\...\sdk_shell):632
    			tx_thread_sleep(1000);
				/*connect_route_cnt++;
				if(connect_route_cnt > 60 && is_has_ssid_pwd())
Wx_heart_package.c (target\...\sdk_shell):673
				tx_thread_sleep(1000);
				continue;

Wx_heart_package.c (target\...\sdk_shell):687
				tx_thread_sleep(1000);
				has_connect_ok_failed++;
				if(has_connect_ok_failed > 60)
